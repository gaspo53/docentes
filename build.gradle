buildscript {
	repositories {
		mavenCentral()
		jcenter()
	}
	
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.1.+')
		classpath('com.eriwen:gradle-css-plugin:1.+')
		classpath('com.eriwen:gradle-js-plugin:1.+')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'com.eriwen.gradle.css'
apply plugin: 'com.eriwen.gradle.js'


jar {
    baseName = 'simor'
    version =  '0.5.0'
}

configurations {
	compile.exclude module: 'spring-boot-starter-jetty'
	compile.exclude module: 'spring-boot-starter-logging'
	compile.exclude module: 'org.hibernate:hibernate-validator'
}

//TODO Tomcat8 fix 
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
	  if (details.requested.group == 'org.apache.tomcat.embed') {
		  details.useVersion '8.0.3'
	  }
	}
  }

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    //TODO pasar a Jetty9 con spring-boot-starter (o Tomcat8)
//    compile 'org.eclipse.jetty:jetty-webapp:9.+'
//    compile 'org.eclipse.jetty:jetty-jsp:9.+'
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-log4j')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-velocity')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity3')

    compile('javax.mail:mail:1.4.7')
    compile('javax.servlet:javax.servlet-api:3.1.0')
    compile('com.google.guava:guava:17.0')
    compile('org.reflections:reflections:0.9.9-RC2')
    compile('org.apache.commons:commons-lang3:3.3.2')
    compile('commons-io:commons-io:2.4')
    compile('commons-validator:commons-validator:1.4.0')
    compile('org.jsoup:jsoup:1.7.3')
    compile('net.sourceforge.cssparser:cssparser:0.9.14')
    compile('org.seleniumhq.selenium:selenium-java:2.44.0')
    compile('com.github.detro:phantomjsdriver:1.2.+'){
        exclude module: 'org.mortbay.jetty:servlet-api-2.5'
    }
    compile('xml-apis:xml-apis:1.4.01')
    compile('org.apache.jcs:jcs:1.3')
    compile('cglib:cglib:3.1')
    compile('org.apache.camel:camel-spring:2.13.2')
    compile('org.apache.camel:camel-test-spring:2.13.2')
	
	//Test scope
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

compileJava{
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
}	

eclipse {
	classpath {
	  //default settings for downloading sources and Javadoc:
	  downloadSources = true
	  downloadJavadoc = false
	}
}

//CSS and JS minifying - combining

// CSS
String[] cssDirs = ["${staticResourcesDir}/css/bootstrap",
					"${staticResourcesDir}/css/adminLTE",
					"${staticResourcesDir}/css/codemirror",
					"${staticResourcesDir}/css/font-awesome",
					"${staticResourcesDir}/css/fonts",
					"${staticResourcesDir}/css/img",
					"${staticResourcesDir}/css/ionicons",
					"${staticResourcesDir}/css/ladda",
					"${staticResourcesDir}/css/morris",
					"${staticResourcesDir}/css/z_app"]
css.source {
	dev {
		css {
			srcDirs cssDirs
			include "*.css"
			exclude "application*.css"
		}
	}
}

combineCss {
	source = css.source.dev.css.files
	dest = file("${staticResourcesDir}/css/application.css")
}

minifyCss {
	source = combineCss
	dest = file("${staticResourcesDir}/css/application.min.css")
	yuicompressor { // Optional
		lineBreakPos = -1
	}
}

// JavaScript
String[] jsDirs = [ "${staticResourcesDir}/js/jquery",
                    "${staticResourcesDir}/js/bootbox",
                    "${staticResourcesDir}/js/bootstrap",
					"${staticResourcesDir}/js/codeMirror/base",
					"${staticResourcesDir}/js/codeMirror/plugins",
					"${staticResourcesDir}/js/spinner",
					"${staticResourcesDir}/js/ladda/base",
					"${staticResourcesDir}/js/ladda/plugins",
					"${staticResourcesDir}/js/lodash",
					"${staticResourcesDir}/js/morris",
					"${staticResourcesDir}/js/raphael",
					"${staticResourcesDir}/js/validate",
					"${staticResourcesDir}/js/z_app"]
javascript.source {
	dev {
		js {
			srcDirs jsDirs
			include "*.js"
			exclude "application*.js"
		}
	}
	prod {
		js {
			srcDirs jsDirs
			include "*.js"
			exclude "application*.js"
		}
	}
}

combineJs {
	source = javascript.source.dev.js.files
	dest = file("${staticResourcesDir}/js/application.js")
}

minifyJs {
	source = combineJs
	dest = file("${staticResourcesDir}/js/application.min.js")
	closure.warningLevel = 'QUIET'
}

compileJava.dependsOn(minifyCss)
compileJava.dependsOn(minifyJs)
